create table "public"."transactions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" bigint,
    "token_name" text,
    "token_price" double precision,
    "token_amount" double precision,
    "date_purchased" timestamp with time zone,
    "date_sold" timestamp with time zone
);


CREATE UNIQUE INDEX transactions_pkey ON public.transactions USING btree (id);

alter table "public"."transactions" add constraint "transactions_pkey" PRIMARY KEY using index "transactions_pkey";

alter table "public"."transactions" add constraint "transactions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."transactions" validate constraint "transactions_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.insert_culture_ref(culture_ref text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    current_user_id uuid;
    existing_culture_ref text;
BEGIN
    -- Get the current user ID from the JWT
    SELECT auth.uid() INTO current_user_id;
    
    -- Check if the provided culture_ref exists in the referrals table
    IF NOT EXISTS (SELECT 1 FROM public.referrals WHERE public.referrals.culture_ref = $1) THEN
        RAISE EXCEPTION 'Culture reference % does not exist in referrals', $1;
    END IF;

    -- Check if the current user's profile has an existing culture_ref
    SELECT p.culture_ref INTO existing_culture_ref 
    FROM public.profiles p 
    WHERE p.user_id = current_user_id;

    -- If the culture_ref is not set, update it with the provided culture_ref
    IF existing_culture_ref IS NULL THEN
        UPDATE public.profiles
        SET culture_ref = $1
        WHERE public.profiles.user_id = current_user_id;
    END IF;

    -- If culture_ref already exists, do nothing and return
    RETURN;
END;
$function$
;

grant delete on table "public"."transactions" to "anon";

grant insert on table "public"."transactions" to "anon";

grant references on table "public"."transactions" to "anon";

grant select on table "public"."transactions" to "anon";

grant trigger on table "public"."transactions" to "anon";

grant truncate on table "public"."transactions" to "anon";

grant update on table "public"."transactions" to "anon";

grant delete on table "public"."transactions" to "authenticated";

grant insert on table "public"."transactions" to "authenticated";

grant references on table "public"."transactions" to "authenticated";

grant select on table "public"."transactions" to "authenticated";

grant trigger on table "public"."transactions" to "authenticated";

grant truncate on table "public"."transactions" to "authenticated";

grant update on table "public"."transactions" to "authenticated";

grant delete on table "public"."transactions" to "service_role";

grant insert on table "public"."transactions" to "service_role";

grant references on table "public"."transactions" to "service_role";

grant select on table "public"."transactions" to "service_role";

grant trigger on table "public"."transactions" to "service_role";

grant truncate on table "public"."transactions" to "service_role";

grant update on table "public"."transactions" to "service_role";


