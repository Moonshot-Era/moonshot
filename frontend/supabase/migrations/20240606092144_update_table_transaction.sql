create type "public"."transaction_type" as enum ('buy', 'sell');

drop policy "Enable delete for users based on user_id" on "public"."profiles";

drop policy "Enable insert for authenticated users only" on "public"."profiles";

drop policy "Enable read for users based on user_id" on "public"."profiles";

drop policy "Enable update for users based on userID" on "public"."profiles";

drop policy "Enable read access for all users" on "public"."referrals";

revoke delete on table "public"."referrals" from "anon";

revoke insert on table "public"."referrals" from "anon";

revoke references on table "public"."referrals" from "anon";

revoke select on table "public"."referrals" from "anon";

revoke trigger on table "public"."referrals" from "anon";

revoke truncate on table "public"."referrals" from "anon";

revoke update on table "public"."referrals" from "anon";

revoke delete on table "public"."referrals" from "authenticated";

revoke insert on table "public"."referrals" from "authenticated";

revoke references on table "public"."referrals" from "authenticated";

revoke select on table "public"."referrals" from "authenticated";

revoke trigger on table "public"."referrals" from "authenticated";

revoke truncate on table "public"."referrals" from "authenticated";

revoke update on table "public"."referrals" from "authenticated";

revoke delete on table "public"."referrals" from "service_role";

revoke insert on table "public"."referrals" from "service_role";

revoke references on table "public"."referrals" from "service_role";

revoke select on table "public"."referrals" from "service_role";

revoke trigger on table "public"."referrals" from "service_role";

revoke truncate on table "public"."referrals" from "service_role";

revoke update on table "public"."referrals" from "service_role";

alter table "public"."profiles" drop constraint "public_profiles_culture_ref_fkey";

drop function if exists "public"."get_refresh_token"();

drop function if exists "public"."insert_culture_ref"(culture_ref text);

drop function if exists "public"."store_refresh_token"(refresh_token text);

alter table "public"."referrals" drop constraint "referrals_pkey";

alter table "public"."profiles" drop constraint "profiles_pkey";

drop index if exists "public"."referrals_pkey";

drop index if exists "public"."profiles_pkey";

drop table "public"."referrals";

alter table "public"."profiles" drop column "culture_ref";

alter table "public"."profiles" drop column "get_notifications";

alter table "public"."profiles" drop column "onboarding_completed";

alter table "public"."profiles" drop column "rt";

alter table "public"."profiles" add column "dob" text;

alter table "public"."profiles" add column "id" bigint generated by default as identity not null;

alter table "public"."profiles" disable row level security;

alter table "public"."transactions" drop column "date_purchased";

alter table "public"."transactions" drop column "date_sold";

alter table "public"."transactions" add column "image_url" text;

alter table "public"."transactions" add column "token_address" text;

alter table "public"."transactions" add column "transaction_type" transaction_type;

alter table "public"."transactions" add column "wallet_address" text;

alter table "public"."transactions" alter column "user_id" set data type bigint using "user_id"::bigint;

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."transactions" add constraint "public_transactions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."transactions" validate constraint "public_transactions_user_id_fkey";


